name: Django CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  DOCKER_HUB_REPO: joshua192/nasaftours

jobs:
  build-test-push:
    name: Build, Test, and Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.meta.outputs.image_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Run tests
        run: |
          python manage.py test

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set IMAGE_TAG
        id: meta
        run: |
          IMAGE_TAG=$(date +'%Y%m%d%H%M%S')
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ env.DOCKER_HUB_REPO }}:${{ env.IMAGE_TAG }} .
          docker push ${{ env.DOCKER_HUB_REPO }}:${{ env.IMAGE_TAG }}

  deploy-to-azure:
    name: Deploy to Azure VM
    needs: build-test-push
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: ${{ needs.build-test-push.outputs.image_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.1

      - name: Prepare production compose file
        run: |
          mkdir -p deployment
          sed -e "s|build: .|image: ${{ env.DOCKER_HUB_REPO }}:${{ env.IMAGE_TAG }}|" \
              -e "s/container_name: nasaftours_web//" \
              compose.yml > deployment/docker-compose.prod.yml

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AZURE_VM_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.AZURE_VM_IP }} >> ~/.ssh/known_hosts

      - name: Setup .env & required directories on VM
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_IP }} << 'EOT'
          set -e
          APP_DIR=~/nasaftours
          sudo mkdir -p $APP_DIR
          sudo chown -R $USER:$USER $APP_DIR

          tee $APP_DIR/.env > /dev/null <<EOF
          DATABASE_NAME=${{ secrets.DATABASE_NAME }}
          DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}
          DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
          DATABASE_HOST=db
          DATABASE_PORT=5432
          DATABASE_ENGINE=postgresql
          DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
          DJANGO_LOGLEVEL=info
          DJANGO_ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}
          DEBUG=False
          EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}
          EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}
          AZURE_ACCOUNT_NAME=${{ secrets.AZURE_ACCOUNT_NAME }}
          AZURE_ACCOUNT_KEY=${{ secrets.AZURE_ACCOUNT_KEY }}
          AZURE_MEDIA_CONTAINER=media
          AZURE_CUSTOM_DOMAIN=${{ secrets.AZURE_CUSTOM_DOMAIN }}
          EOF

          sudo mkdir -p /app/logs /app/staticfiles
          sudo chown -R 1000:1000 /app/logs /app/staticfiles
          EOT

      - name: Copy compose file & deploy
        run: |
          scp -o StrictHostKeyChecking=no deployment/docker-compose.prod.yml \
              ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_IP }}:~/nasaftours/

          ssh -o StrictHostKeyChecking=no ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_IP }} << 'EOT'
          set -e
          cd ~/nasaftours

          CURRENT_TAG=$(sudo docker compose -f docker-compose.prod.yml config | grep image | awk '{print $2}' | cut -d':' -f2 || echo "none")
          echo $CURRENT_TAG > previous_tag.txt

          sudo docker compose -f docker-compose.prod.yml down
          sudo docker compose -f docker-compose.prod.yml pull
          sudo docker compose -f docker-compose.prod.yml up -d

          for i in {1..10}; do
              if curl --fail http://localhost:8000/health; then
                  echo "Django is healthy"
                  break
              fi
              echo "Waiting for Django to be ready... ($i/10)"
              sleep 5
          done

          sudo docker compose -f docker-compose.prod.yml exec django-web python manage.py migrate
          sudo docker compose -f docker-compose.prod.yml exec django-web python manage.py collectstatic --noinput

          if ! curl --fail http://localhost:8000/health; then
              echo "Deployment failed, rolling back..."
              if [ -f previous_tag.txt ] && [ "$CURRENT_TAG" != "none" ]; then
                  sudo sed -i "s|:${IMAGE_TAG}|:${CURRENT_TAG}|" docker-compose.prod.yml
                  sudo docker compose -f docker-compose.prod.yml up -d
              fi
              exit 1
          fi

          sudo docker compose -f docker-compose.prod.yml restart django-web
          sudo docker image prune -f
          EOT

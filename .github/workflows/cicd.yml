name: Django CI/CD Pipeline (Azure VM + Docker Hub)

on:
  push:
    branches: [main]

permissions:
  contents: read
  packages: write

env:
  DOCKER_HUB_REPO: joshua192/nasaftours
  COMPOSE_PROJECT_NAME: nasaftours-prod
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-test-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.1

      - name: Set up Python
        uses: actions/setup-python@v4.7.0
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black pycodestyle pyflakes bandit pip-audit

      - name: Check Black formatting
        run: |
          black --check nasaftours tourghanaapp --verbose --exclude "(migrations|env|.venv|__pycache__)"

      - name: Run pycodestyle linting
        run: |
          pycodestyle nasaftours tourghanaapp \
            --max-line-length=120 \
            --exclude=.venv,env,migrations,__pycache__,static,templates

      - name: Run pyflakes import checks
        run: |
          pyflakes nasaftours tourghanaapp

      - name: Run Bandit security scan
        run: |
          bandit -r nasaftours tourghanaapp \
            -x tests,migrations,__pycache__,env,.venv

      - name: Scan Python dependencies
        run: |
          pip-audit --requirement requirements.txt --strict

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver: docker-container

      - name: Build Docker image (local for tests)
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          load: true
          tags: ${{ env.DOCKER_HUB_REPO }}:${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Login to Docker Hub
        uses: docker/login-action@v2.2.0
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Push Docker image
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_HUB_REPO }}:latest
            ${{ env.DOCKER_HUB_REPO }}:${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Scan Docker image for vulnerabilities
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.DOCKER_HUB_REPO }}:${{ env.IMAGE_TAG }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  deploy-to-azure:
    needs: build-test-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.1

      - name: Prepare production compose file
        run: |
          mkdir -p deployment
          # Create production compose file without build context and container_name
          sed -e "s|build: .|image: ${{ env.DOCKER_HUB_REPO }}:${{ github.sha }}|" \
              -e "s/container_name: nasaftours_web//" \
              compose.yml > deployment/docker-compose.prod.yml

      - name: Setup SSH and create .env on VM
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AZURE_VM_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.AZURE_VM_IP }} >> ~/.ssh/known_hosts
          # Test SSH connection
          ssh -o StrictHostKeyChecking=no ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_IP }} "echo 'SSH connection test successful'"
          # Create .env file on VM
          ssh ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_IP }} << 'EOF'
          cd ~/nasaftours || mkdir -p ~/nasaftours
          cat > .env <<EOL
          DATABASE_NAME=${{ secrets.DATABASE_NAME }}
          DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}
          DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
          DATABASE_HOST=db
          DATABASE_PORT=5432
          DATABASE_ENGINE=postgresql
          DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
          DJANGO_LOGLEVEL=info
          DJANGO_ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}
          DEBUG=False
          EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}
          EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}
          AZURE_ACCOUNT_NAME=${{ secrets.AZURE_ACCOUNT_NAME }}
          AZURE_ACCOUNT_KEY=${{ secrets.AZURE_ACCOUNT_KEY }}
          AZURE_MEDIA_CONTAINER=media
          AZURE_CUSTOM_DOMAIN=${{ secrets.AZURE_CUSTOM_DOMAIN }}
          EOL
          EOF

      - name: Copy compose file to Azure VM
        run: |
          scp -o StrictHostKeyChecking=no deployment/docker-compose.prod.yml \
            ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_IP }}:~/nasaftours/

      - name: Deploy on Azure VM
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_IP }} << 'EOF'
          cd ~/nasaftours

          # Backup current image tag
          CURRENT_TAG=$(docker compose -f docker-compose.prod.yml config | grep image | awk '{print $2}' | cut -d':' -f2 || echo "none")
          echo $CURRENT_TAG > previous_tag.txt

          # Stop and remove old containers
          docker compose -f docker-compose.prod.yml down

          # Pull latest images
          docker compose -f docker-compose.prod.yml pull db
          docker compose -f docker-compose.prod.yml pull || { docker compose -f docker-compose.prod.yml logs; exit 1; }

          # Start services
          docker compose -f docker-compose.prod.yml up -d || { docker compose -f docker-compose.prod.yml logs; exit 1; }

          # Run Django migrations and collect static files
          docker compose -f docker-compose.prod.yml exec django-web python manage.py migrate
          docker compose -f docker-compose.prod.yml exec django-web python manage.py collectstatic --noinput

          # Health check
          if ! curl --fail http://localhost:8000/health; then
            echo "Deployment failed, rolling back"
            if [ -f previous_tag.txt ] && [ "$CURRENT_TAG" != "none" ]; then
              sed -i "s/:${{ github.sha }}/:$CURRENT_TAG/" docker-compose.prod.yml
              docker compose -f docker-compose.prod.yml up -d
            fi
            exit 1
          fi

          # Restart web service and cleanup
          docker compose -f docker-compose.prod.yml restart django-web
          docker image prune -f
          EOF
          
  # notify:
  #   needs: deploy-to-azure
  #   if: always()
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Notify via Email
  #       uses: dawson-org/email-action@v1.0.0
  #       with:
  #         smtp_host: smtp.gmail.com
  #         smtp_port: 587
  #         smtp_user: ${{ secrets.EMAIL_HOST_USER }}
  #         smtp_password: ${{ secrets.EMAIL_HOST_PASSWORD }}
  #         to: ${{ secrets.NOTIFICATION_EMAIL }}
  #         from: ${{ secrets.EMAIL_HOST_USER }}
  #         subject: "Deployment ${{ needs.deploy-to-azure.result }} for nasaftours"
  #         body: "Deployment ${{ needs.deploy-to-azure.result }} for commit ${{ github.sha }} on nasaftours at $(date -u +'%Y-%m-%d %H:%M:%S UTC')"

# name: Django CI/CD Pipeline (Azure VM + Docker Hub)

# on:
#   push:
#     branches: [main]

# permissions:
#   contents: read
#   packages: write

# env:
#   DOCKER_HUB_REPO: joshua192/nasaftours
#   COMPOSE_PROJECT_NAME: nasaftours-prod
#   IMAGE_TAG: ${{ github.sha }}

# jobs:
#   build-test-push:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4.1.1

#       - name: Set up Python
#         uses: actions/setup-python@v4.7.0
#         with:
#           python-version: '3.10'

#       - name: Install dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install -r requirements.txt
#           pip install black pycodestyle pyflakes bandit pip-audit

#       - name: Check Black formatting
#         run: |
#           black --check nasaftours tourghanaapp --verbose --exclude "(migrations|env|.venv|__pycache__)"

#       - name: Run pycodestyle linting
#         run: |
#           pycodestyle nasaftours tourghanaapp \
#             --max-line-length=120 \
#             --exclude=.venv,env,migrations,__pycache__,static,templates

#       - name: Run pyflakes import checks
#         run: |
#           pyflakes nasaftours tourghanaapp

#       - name: Run Bandit security scan
#         run: |
#           bandit -r nasaftours tourghanaapp \
#             -x tests,migrations,__pycache__,env,.venv

#       - name: Scan Python dependencies
#         run: |
#           pip-audit --requirement requirements.txt --strict

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3
#         with:
#           install: true
#           driver: docker-container

#       # Build locally for testing (load into runner's Docker)
#       - name: Build Docker image (local for tests)
#         uses: docker/build-push-action@v4.1.1
#         with:
#           context: .
#           load: true
#           tags: ${{ env.DOCKER_HUB_REPO }}:${{ env.IMAGE_TAG }}
#           cache-from: type=gha
#           cache-to: type=gha,mode=max

  
#       - name: Login to Docker Hub
#         uses: docker/login-action@v2.2.0
#         with:
#           username: ${{ secrets.DOCKER_HUB_USERNAME }}
#           password: ${{ secrets.DOCKER_HUB_TOKEN }}

#       # Push only after tests pass
#       - name: Push Docker image
#         uses: docker/build-push-action@v4.1.1
#         with:
#           context: .
#           push: true
#           tags: |
#             ${{ env.DOCKER_HUB_REPO }}:latest
#             ${{ env.DOCKER_HUB_REPO }}:${{ env.IMAGE_TAG }}
#           cache-from: type=gha
#           cache-to: type=gha,mode=max

#       - name: Scan Docker image for vulnerabilities
#         uses: aquasecurity/trivy-action@0.28.0
#         with:
#           image-ref: ${{ env.DOCKER_HUB_REPO }}:${{ env.IMAGE_TAG }}
#           format: 'table'
#           exit-code: '1'
#           ignore-unfixed: true
#           vuln-type: 'os,library'
#           severity: 'CRITICAL,HIGH'
  
  